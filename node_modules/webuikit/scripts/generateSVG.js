/* eslint-disable no-undef */
const path = require("path");
const fs = require("fs");
const glob = require("glob");
const parse5 = require("parse5");

// eslint-disable-next-line no-undef
const SVG_DIR = path.resolve(__dirname, "../src/Components/Icon/svgs");
const SRC_DIR = path.resolve(__dirname, "../src/Components/Icon/svgs/src");
const TARGET_DIR = path.resolve(
  __dirname,
  "../src/Components/Icon/svgs/generated"
);

const camelize = name => {
  return name
    .replace(/(?:^\w|[A-Z]|\b\w)/g, function(word, index) {
      return index === 0 ? word.toLowerCase() : word.toUpperCase();
    })
    .replace(/\s|[-.]+/g, "");
};

const getFileContent = file => {
  return fs.readFileSync(path.resolve(__dirname, SRC_DIR, file), "utf8");
};

const excludeFill = node => {
  node.childNodes = node.childNodes.reduce((acc, child) => {
    if (child.attrs) {
      // exclude fill attr
      child.attrs = child.attrs.filter(a => a.name !== "fill");
      // camelize attr names
      child.attrs = child.attrs.map(a => {
        a.name = camelize(a.name);
        return a;
      });
    } else if (child.value && child.value == "\n") {
      return acc;
    }
    if (child.childNodes.length) {
      excludeFill(child);
    }

    return [...acc, child];
  }, []);

  return node;
};

const getSvgNodes = doc => {
  const node = doc.childNodes[0].childNodes[1].childNodes[0]; // html > body > svg
  return excludeFill(node);
};

const getJsTemplate = (icon, svg) => {
  return (
    `import React from "react";\n\n` +
    `const ${icon} = (\n  ` +
    `<React.Fragment>\n` +
    `    ${svg}\n` +
    `  </React.Fragment>\n` +
    `);\n\n` +
    `export default ${icon};\n`
  );
};

const getIconImports = icons =>
  icons
    .map(
      icon =>
        `import ${path.parse(icon).name.trim()} from "./generated/${path
          .parse(icon)
          .name.trim()}";`
    )
    .join("\n");

const getIconObject = icons => {
  const keys = icons.map(icon => path.parse(icon).name.trim()).join(",\n  ");
  return `const svg = {\n  ${keys}\n};`;
};

const getIndextemplate = (imports, iconObject) => {
  return (
    `${imports}\n\n` +
    `${iconObject}\n\n` +
    `const getSVG = name => svg[name] || "";\n\n` +
    `export default getSVG;\n`
  );
};

const createIndex = () => {
  // eslint-disable-next-line no-undef
  const indexFile = path.resolve(__dirname, SVG_DIR, "index.js");
  const icons = glob.sync("*.js", { cwd: TARGET_DIR });
  const imports = getIconImports(icons);
  const iconObject = getIconObject(icons);
  const indexTemplate = getIndextemplate(imports, iconObject);
  fs.writeFileSync(indexFile, indexTemplate, "utf-8");
};

const processSingleFile = file => {
  const fileName = path.parse(file).name.trim();
  const icon = camelize(fileName);
  const newFile = icon + ".js";
  const fileContent = getFileContent(file);
  const parsedSVG = parse5.parse(fileContent);
  const filteredSVG = parse5.serialize(getSvgNodes(parsedSVG));
  const jsTemplate = getJsTemplate(icon, filteredSVG);
  fs.writeFileSync(path.resolve(TARGET_DIR, newFile), jsTemplate, "utf-8");
};

const generateIconList = () => {
  // eslint-disable-next-line no-undef
  const iconListFile = path.resolve(__dirname, SVG_DIR, "iconList.js");
  const icons = glob.sync("*.svg", { cwd: SRC_DIR });
  const iconList = icons
    .map(file => ('"' + path.parse(file).name.trim() + '"').toLowerCase())
    .join(",\n  ");

  fs.writeFileSync(
    iconListFile,
    `const iconList = [\n  ${iconList}\n];\n\nexport default iconList;\n`,
    "utf-8"
  );
};

const process = function() {
  if (!fs.existsSync(TARGET_DIR)) {
    fs.mkdirSync(TARGET_DIR);
  }

  const files = glob.sync("*.svg", { cwd: SRC_DIR });
  files.map(file => processSingleFile(file));
  createIndex();
  generateIconList();
};

process();
