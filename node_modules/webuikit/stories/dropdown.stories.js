import React, { useState } from "react";
import { storiesOf } from "@storybook/react";
import Dropdown from "Components/Dropdown";
import MenuItem from "Components/MenuItem";
import PropTypes from "prop-types";
import withDocs from "storybook-readme/with-docs";
import DropdownReadme from "Components/Dropdown/README.md";

storiesOf("Dropdown", module)
  .add(
    "Introduction",
    withDocs(DropdownReadme, () => <DropdownWrapper showArrow />)
  )
  .addWithChapters("Dropdown Demo", {
    subtitle: "Different state and props of Dropdown component.",
    chapters: [
      {
        title: "Basic Dropdown",
        info: `
        ~~~js
        import Dropdown from "WebUIKit/Dropdown";
        ~~~
        `,
        sections: [
          {
            title: "Basic",
            sectionFn: () => {
              const handleSelect = value => {};
              return (
                <Dropdown
                  value="English"
                  onSelect={handleSelect}
                  width="300px"
                  leftIcon="star"
                  helperText="Choose a language"
                >
                  <MenuItem
                    value="english"
                    label="English"
                    leftIcon="star"
                    selected={true}
                  />
                  <MenuItem value="hindi" label="Hindi" leftIcon="star" />
                  <MenuItem value="marathi" label="Marathi" leftIcon="star" />
                  <MenuItem value="bengali" label="Bengali" leftIcon="star" />
                </Dropdown>
              );
            },
            options: {
              showSource: false,
              allowSourceToggling: true,
              showPropTables: false,
              allowPropTablesToggling: false
            }
          },
          {
            title: "Error State",
            sectionFn: () => {
              const handleSelect = value => {};
              return (
                <Dropdown
                  value="English"
                  onSelect={handleSelect}
                  width="300px"
                  leftIcon="star"
                  errorText="Invalid language selected"
                >
                  <MenuItem
                    value="english"
                    label="English"
                    leftIcon="star"
                    selected={true}
                  />
                  <MenuItem value="hindi" label="Hindi" leftIcon="star" />
                  <MenuItem value="marathi" label="Marathi" leftIcon="star" />
                  <MenuItem value="bengali" label="Bengali" leftIcon="star" />
                </Dropdown>
              );
            },
            options: {
              showSource: false,
              allowSourceToggling: true,
              showPropTables: false,
              allowPropTablesToggling: false
            }
          },
          {
            title: "Dropdown Arrow",
            sectionFn: () => {
              const handleSelect = value => {};
              return (
                <Dropdown
                  value="English"
                  onSelect={handleSelect}
                  width="300px"
                  leftIcon="star"
                  showArrow={true}
                >
                  <MenuItem
                    value="english"
                    label="English"
                    leftIcon="star"
                    selected={true}
                  />
                  <MenuItem value="hindi" label="Hindi" leftIcon="star" />
                  <MenuItem value="marathi" label="Marathi" leftIcon="star" />
                  <MenuItem value="bengali" label="Bengali" leftIcon="star" />
                </Dropdown>
              );
            },
            options: {
              showSource: true,
              allowSourceToggling: true,
              showPropTables: false,
              allowPropTablesToggling: false
            }
          }
        ]
      }
    ]
  });

const menuItems = [
  {
    value: 1,
    leftIcon: "location",
    label: "New Delhi"
  },
  {
    value: 2,
    leftIcon: "location",
    label: "Kolkata"
  },
  {
    value: 3,
    leftIcon: "location",
    label: "Thiruvananthapuram"
  },
  {
    value: 4,
    leftIcon: "location",
    label: "Bangalore"
  }
];

const DropdownWrapper = ({ helperText, errorText, showArrow }) => {
  const [selected, setSelected] = useState(2);
  const isSelected = value => value === selected;
  const handleSelect = value => setSelected(value);
  return (
    <Dropdown
      leftIcon="locationFill"
      value="Kolkata"
      width="250px"
      onSelect={handleSelect}
      helperText={helperText}
      errorText={errorText}
      showArrow={showArrow}
    >
      {menuItems.map(item => (
        <MenuItem
          key={item.value}
          value={item.value}
          leftIcon={item.leftIcon}
          label={item.label}
          selected={isSelected(item.value)}
        />
      ))}
    </Dropdown>
  );
};

DropdownWrapper.propTypes = {
  errorText: PropTypes.string,
  helperText: PropTypes.string,
  showArrow: PropTypes.bool
};
