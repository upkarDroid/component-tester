import React from "react";
import { css } from "styled-components";

const hexToRgb = hex => {
  if (!hex) {
    return null;
  }
  // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
  var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  hex = hex.replace(shorthandRegex, function(m, r, g, b) {
    return r + r + g + g + b + b;
  });

  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  const rgbObj = {
    r: result && parseInt(result[1], 16),
    g: result && parseInt(result[2], 16),
    b: result && parseInt(result[3], 16)
  };
  return result ? rgbObj : null;
};

const getRGBAFromHex = (hex, alpha) => {
  const rgbObj = hexToRgb(hex);
  return hex ? `rgba(${rgbObj.r},${rgbObj.g},${rgbObj.b},${alpha})` : null;
};

const cloneChildren = (children, handler) => {
  if (Array.isArray(children)) {
    return children.map(ch => React.cloneElement(ch, handler));
  }
  return React.cloneElement(children, handler);
};

const svgStyle = css`
  display: inline-block;
  vertical-align: middle;
  line-height: 1;
  width: ${props => props.width}px;
  height: ${props => props.height}px;
`;

const iconStyle = css`
  display: flex;
  align-items: center;
  cursor: ${props => (props.showPointer ? "pointer" : "inherit")};
`;

const camelize = name => {
  return name
    .replace(/(?:^\w|[A-Z]|\b\w)/g, function(word, index) {
      return index === 0 ? word.toLowerCase() : word.toUpperCase();
    })
    .replace(/\s|[-.]+/g, "");
};


export const transitionFromAuto = (el, endHeight) => {
  el.style.height = window.getComputedStyle(el).height;
  // Force repaint
  //eslint-disable-next-line no-unused-expressions
  el.offsetHeight;
  el.style.height = endHeight + "px";
  // el.style.overflow = 'hidden'
};

export const transitionToAuto = el => {
  const prevHeight = el.style.height;
  el.style.height = "auto";
  const endHeight = window.getComputedStyle(el).height;
  el.style.height = prevHeight;
  // Force repaint
  //eslint-disable-next-line no-unused-expressions
  el.offsetHeight;
  el.style.height = endHeight;
};

const getCDN = link => `https://b.zmtcdn.com/${link}`;


export {
  hexToRgb,
  getRGBAFromHex,
  cloneChildren,
  svgStyle,
  iconStyle,
  camelize,
  getCDN
};
