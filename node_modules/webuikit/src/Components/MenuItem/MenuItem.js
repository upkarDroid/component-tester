import React from "react";
import styled from "styled-components";
import Icon from "Components/Icon";
import PropTypes from "prop-types";
import { grey, black } from "ZColors";
import { noop as _noop } from "lodash-es";

const MenuItem = props => {
  const {
    leftIcon = "",
    value = "",
    label = "",
    desc = "",
    selected = false,
    bold = "", // may or may not be passed
    _passClick // Should be passed from wrapper component
  } = props;

  const handleClick = (value, label) => e => {
    e.preventDefault();
    _passClick(value, label);
  };

  return (
    <MenuItem.Wrapper onClick={handleClick(value, label)} isSelected={selected}>
      <LeftSection>
        <Icon name={leftIcon} size={16} color={grey.z800} />
        <Span isSelected={selected}>{getBoldLabel(label, bold)}</Span>
      </LeftSection>
      {!!desc && <DescSpan>{desc}</DescSpan>}
    </MenuItem.Wrapper>
  );
};

const getBoldLabel = (label, str) => {
  if (!str) return label;
  const pattern = new RegExp(str, "i");
  const match = label.match(pattern);
  label = label.replace(pattern, "");
  return (
    <React.Fragment>
      <Bold>{match}</Bold>
      {label}
    </React.Fragment>
  );
};

const Bold = styled.span`
  font-weight: 500;
  font-size: inherit;
  color: ${black};
`;

MenuItem.propTypes = {
  leftIcon: PropTypes.string,
  text: PropTypes.string,
  label: PropTypes.string,
  desc: PropTypes.string,
  value: PropTypes.string,
  selected: PropTypes.bool,
  bold: PropTypes.string,
  _passClick: _noop
};

const DescSpan = styled.span`
  font-size: 1.5rem;
  color: ${grey.z400};
  white-space: nowrap;
  margin-left: 3rem;
  overflow: hidden;
  text-overflow: ellipsis;
  font-weight: 300;
`;

const LeftSection = styled.span`
  display: flex;
`;

const Span = styled.span`
  margin-left: 1rem;
  margin-top: 0.3rem;
  font-size: 1.8rem;
  color: ${grey.z800};
  font-weight: 300;
`;

MenuItem.Wrapper = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  padding: 1.3rem 2rem;
  cursor: pointer;
  background-color: ${props => (props.isSelected ? "#E9F2FC" : "initial")};
  &:hover {
    background-color: ${grey.z100};
  }
  &:hover > span {
    color: ${grey.z800};
  }
`;

export default MenuItem;
