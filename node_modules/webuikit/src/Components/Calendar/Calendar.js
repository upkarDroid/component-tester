// libraries
import React, { useState } from "react";
import PropTypes from "prop-types";
import styled from "styled-components";
import { noop as _noop } from "lodash-es";

// components
import { Calendar as CalendarComponent } from "react-date-range";

// styles
import "style-loader!../../../node_modules/react-date-range/dist/styles.css";
import "style-loader!../../../node_modules/react-date-range/dist/theme/default.css";

const getDefaultColor = props => props.color;

const ComponentWrapper = styled.div`
  &&& .rdrSelected,
  .rdrDay,
  .rdrDay span {
    color: ${getDefaultColor} !important;
  }
  .rdrInRange {
    top: 6px;
    bottom: 6px;
    left: 0;
    right: 0;
  }
  .rdrMonth {
    width: 32rem;
  }

  .rdrDayNumber span {
    color: #1c1c1c !important;
  }

  .rdrDayToday .rdrDayNumber span:after {
    background: ${getDefaultColor} !important;
  }
  .rdrSelected {
    right: 5.5px;
    left: 5.5px;
    border-radius: 50%;
    top: 4px;
    bottom: 4px;
  }

  .rdrDay {
    height: 2.428em;
  }

  .rdrCalendarWrapper:not(.rdrDateRangeWrapper)
    .rdrDayHovered
    .rdrDayNumber:after {
    border-radius: 50% !important;
    left: 5px !important;
    right: 5px !important;
  }

  .rdrDayStartPreview {
    left: 5px !important;
    border-top-left-radius: 50% !important;
    border-bottom-left-radius: 50% !important;
  }

  .rdrDayEndPreview {
    right: 5px !important;
    border-top-right-radius: 50% !important;
    border-bottom-right-radius: 50% !important;
  }

  .rdrDay:not(.rdrDayPassive) .rdrSelected ~ .rdrDayNumber span {
    color: #fff !important;
  }

  .rdrDayPassive .rdrDayNumber span {
    color: #b5b5b5 !important;
  }
`;

const Calendar = props => {
  const [date, setDatePreview] = useState(props.date);

  const setValue = val => {
    props.onChange(val);
    setDatePreview(val);
  };

  return (
    <ComponentWrapper color={props.color}>
      <CalendarComponent
        date={date}
        onChange={setValue}
        months={props.months}
        scroll={{
          enabled: false,
          monthHeight: props.monthHeight,
          longMonthHeight: props.longMonthHeight
        }}
        disabledDates={props.disabledDates}
      />
    </ComponentWrapper>
  );
};

Calendar.propTypes = {
  date: PropTypes.date,
  // infiniteScroll: PropTypes.bool,
  months: PropTypes.number,
  color: PropTypes.string,
  disabledDates: PropTypes.array,
  onChange: PropTypes.func,
  monthHeight: PropTypes.number,
  longMonthHeight: PropTypes.number
};

Calendar.defaultProps = {
  date: new Date(),
  onChange: _noop,
  // infiniteScroll: false,
  months: 1,
  color: "#28a745",
  disabledDates: [],
  monthHeight: 300,
  longMonthHeight: 330
};

export default Calendar;
