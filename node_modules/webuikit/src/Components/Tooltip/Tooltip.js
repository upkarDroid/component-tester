/* eslint-disable indent */
import React from "react";
import styled, { css } from "styled-components";
import misc from "tokens/misc";
import PropTypes from "prop-types";
import { variants, appearanceConfigs } from "tokens/tooltipTokens";
import { getAttr } from "./TooltipUtil";

const Tooltip = props => {
  // eslint-disable-next-line react/prop-types
  const { children, label, size, appearance } = props;

  if (label.length === 0) {
    //do not show any tooltip if there is no label
    return <React.Fragment>{children}</React.Fragment>;
  }
  const variant = variants[size];
  const appearanceConfig = appearanceConfigs[appearance];
  return (
    <Tooltip.container>
      {children}
      <Tooltip.Ele
        {...props}
        variant={variant}
        appearanceConfig={appearanceConfig}
      >
        {props.label}
      </Tooltip.Ele>
    </Tooltip.container>
  );
};

Tooltip.container = styled.div`
  position: relative;
  display: inline-block;
  padding: 0.2rem;
  cursor: pointer;
`;

Tooltip.Ele = styled.span`
  visibility: hidden;
  position: absolute;
  width: ${getAttr("minWidth")}rem;
  height: ${getAttr("minHeight") ? getAttr("minHeight") + "px" : "auto"};
  background-color: ${getAttr("bgColor")};
  color: ${getAttr("color")};
  text-align: center;
  padding: ${getAttr("padding")};
  border-radius: ${getAttr("borderRadius")}rem;
  z-index: 1;
  opacity: 0;

  border-width: 0.2rem;
  border-style: solid;
  border-color: ${getAttr("borderColor")};
  transition: opacity ${misc.animationDuration};
  :after {
    content: "";
    position: absolute;
    top: ${getAttr("arrowTop")};
    left: ${getAttr("arrowLeft")};
    right: ${getAttr("arrowRight")};
    background-color: ${getAttr("bgColor")};
    width: ${getAttr("arrowSize")}px;
    height: ${getAttr("arrowSize")}px;
    transform: rotate(-45deg);
    box-sizing: border-box;
    border-style: solid;
    border-width: 2px;
    border-color: ${getAttr("arrowBorderColor")};
  }

  ${props => {
    switch (props.position) {
      case "top":
        return css`
          left: -50%;
          margin-left: ${getAttr("tooltipMarginLeft")};
          bottom: ${getAttr("toolTipBottom")};
        `;
      case "left":
        return css`
          right: calc(100% + ${getAttr("arrowHeight")}px);
          top: calc(-50% - ${getAttr("arrowHeight")}px);
        `;
      case "bottom":
        return css`
          left: 50%;
          margin-left: ${getAttr("tooltipMarginLeft")};
          ${"" /* top:'unset'; */}
          top: calc(100% + ${getAttr("arrowHeight")}px);
        `;
      case "right":
        return css`
          left: calc(100% + ${getAttr("arrowHeight")}px);
          top: calc(-50% - ${getAttr("arrowHeight")}px);
        `;
    }
  }}

  ${Tooltip.container}:hover & {
    visibility: visible;
    opacity: 1;
  }
`;

Tooltip.propTypes = {
  position: PropTypes.oneOf(["top", "left", "bottom", "right"]),
  appearance: PropTypes.oneOf(["dark", "light"]),
  size: PropTypes.oneOf(["small", "big"]),
  label: PropTypes.string.isRequired
};

Tooltip.defaultProps = {
  position: "top",
  appearance: "dark",
  size: "big",
  label: ""
};

export default Tooltip;
