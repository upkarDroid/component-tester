/* eslint-disable indent */
const getArrowHeight = side => {
  // return Math.ceil(Math.sqrt(2 * side * side) / 2);
  return Math.floor(side / 2);
};

const getToolTipAttr = ({ position, appearanceConfig, variant }) => {
  const styles = {};
  styles.arrow = {};
  const arrowHeight = getArrowHeight(variant.size.arrow);
  styles.arrow.height = styles.arrow.height = variant.size.arrow;
  styles.arrowSize = variant.size.arrow;
  switch (position) {
    case "top":
      styles.arrowTop = `calc(100% - ${arrowHeight / 10}rem)`;
      styles.arrowLeft = `calc(50% - ${arrowHeight / 10}rem)`;
      styles.arrowRight = `unset`;
      styles.arrowBorderColor = `transparent transparent ${
        appearanceConfig.borderColor
      } ${appearanceConfig.borderColor}`;

      styles.toolTipBottom = `calc(100% + ${arrowHeight / 10}rem)`;
      styles.tooltipMarginLeft = `-${Math.floor(variant.minWidth / 20)}rem`;
      break;
    case "bottom":
      styles.arrowTop = `-${arrowHeight / 10}rem`;
      styles.arrowLeft = `calc(50% - ${variant.size.arrow / 10}rem)`;
      styles.arrowRight = `unset`;
      styles.arrowBorderColor = `${appearanceConfig.borderColor} ${
        appearanceConfig.borderColor
      } transparent transparent`;
      styles.tooltipMarginLeft = `-${Math.floor(variant.minWidth / 20)}rem`;
      styles.toolTipBottom = `calc(100% + ${arrowHeight / 10}rem)`;

      break;
    case "left":
      styles.arrowTop = `calc(50% - ${arrowHeight / 10}rem)`;
      styles.arrowLeft = `unset`;
      styles.arrowRight = `-${arrowHeight / 10}rem`;
      styles.arrowBorderColor = `transparent ${appearanceConfig.borderColor} ${
        appearanceConfig.borderColor
      } transparent`;
      break;
    case "right":
      styles.arrowTop = `calc(50% - ${arrowHeight / 10}rem)`;
      styles.arrowLeft = `-${arrowHeight / 10}rem`;
      styles.arrowRight = `unset`;
      styles.arrowBorderColor = `${
        appearanceConfig.borderColor
      } transparent transparent${appearanceConfig.borderColor}`;
      break;
  }

  return { ...styles, ...appearanceConfig, ...variant, arrowHeight };
};

const getAttr = key => props => getToolTipAttr(props)[key];

export { getAttr, getArrowHeight, getToolTipAttr };
