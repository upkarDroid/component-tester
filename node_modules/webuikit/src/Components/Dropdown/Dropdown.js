import React, { useState } from "react";
import styled from "styled-components";
import Icon from "Components/Icon";
import PropTypes from "prop-types";
import { grey, white, green, red } from "ZColors";
import { cloneChildren } from "../../helpers/commonHelper";
import OnClickOutside from "../HOC/OnClickOutside";
import misc from "tokens/misc";

const Dropdown = props => {
  const {
    value,
    width,
    leftIcon,
    rightIcon,
    onSelect,
    children,
    helperText = "",
    errorText = "",
    showArrow = false
  } = props;
  const [isMenuOpen, toggleMenu] = useState(false);
  const [label, setLabel] = useState(value);
  const toggle = () => toggleMenu(!isMenuOpen);
  const closeMenu = () => toggleMenu(false);
  const handleOnSelect = (val, label) => {
    setLabel(label);
    onSelect(val);
  };

  const showText = errorText ? errorText : helperText ? helperText : "";
  const isError = !!errorText;

  return (
    <OnClickOutside onClickOutside={closeMenu}>
      <DropdownWrapper width={width} onClick={toggle}>
        <HeaderWrapper isMenuOpen={isMenuOpen} isError={isError}>
          <LeftSection>
            {!!props.leftIcon && (
              <Icon name={leftIcon} size={16} color={grey.z800} />
            )}
            <Span>{label}</Span>
          </LeftSection>
          <RightSection isMenuOpen={isMenuOpen}>
            <Icon name={rightIcon} size={14} color={grey.z400} />
          </RightSection>
        </HeaderWrapper>
        {!!showText && <HelperText isError={isError}>{showText}</HelperText>}
        <MenuHolder showArrow={showArrow} isOpen={isMenuOpen}>
          {isMenuOpen && (
            <>
              {showArrow && (
                <React.Fragment>
                  <MenuHolder.Arrow />
                  <Cover />
                </React.Fragment>
              )}
              <MenuWrapper>
                {cloneChildren(children, { _passClick: handleOnSelect })}
              </MenuWrapper>
            </>
          )}
        </MenuHolder>
      </DropdownWrapper>
    </OnClickOutside>
  );
};

const MenuHolder = styled.span`
  position: absolute;
  top: ${props => (props.showArrow ? "6.8rem" : "6.3rem")};
  width: 100%;
  border-radius: ${misc.radius};
  background: ${white};
  box-shadow: 0px 1px 8px rgba(28, 28, 28, 0.15);
  z-index: 10;
  opacity: ${props => (props.isOpen ? "1" : "0")};
  transition: all ${misc.animationDuration} ease;
`;

const MenuWrapper = styled.section`
  margin: 1rem 0;
`;

const Cover = styled.span`
  position: absolute;
  right: 1.5rem;
  width: 2.5rem;
  height: 1rem;
  top: 0;
  background: white;
`;

MenuHolder.Arrow = styled.div`
  position: absolute;
  width: 1.4rem;
  height: 1.4rem;
  transform: rotate(45deg);
  top: -7px;
  right: 2rem;
  background: white;
  box-shadow: 0px -1px 3px rgba(28, 28, 28, 0.15);
`;

const RightSection = styled.span`
  transform: ${props => (props.isMenuOpen ? "rotate(180deg)" : "none")};
  transition: transform ${misc.animationDuration};
`;

const HelperText = styled.p`
  font-size: 11px;
  margin: 8px 0;
  color: ${props => (props.isError ? red.z400 : grey.z400)};
`;

Dropdown.propTypes = {
  value: PropTypes.string,
  width: PropTypes.string,
  leftIcon: PropTypes.string,
  rightIcon: PropTypes.string,
  children: PropTypes.node,
  onSelect: PropTypes.func.isRequired,
  helperText: PropTypes.string,
  errorText: PropTypes.string,
  showArrow: PropTypes.bool
};

Dropdown.defaultProps = {
  label: "Choose...",
  value: "",
  width: "",
  leftIcon: "",
  rightIcon: "downTriangle",
  children: null,
  showArrow: false
};
const Span = styled.span`
  margin-left: 1rem;
  margin-top: 0.2rem;
  color: ${grey.z800};
  font-size: 1.8rem;
  font-weight: 300;
  overflow: hidden;
  text-overflow: ellipsis;
`;
const LeftSection = styled.div`
  display: flex;
  align-items: center;
  margin-right: 20px;
  overflow: hidden;
  white-space: nowrap;
`;

const HeaderWrapper = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: ${props => getPadding(props)};
  font-size: 18px;
  border: ${props => getBorder(props)};
  border-radius: ${misc.radius};
  cursor: pointer;
  background: ${props => (props.isError ? red.z100 : "#fff")};
`;

const getPadding = props => {
  if (props.isError) {
    return "15px 18.5px";
  } else {
    if (props.isMenuOpen) {
      return "15.5px 19px";
    } else {
      return "16.5px 20px";
    }
  }
};

const getBorder = props => () => {
  if (props.isError) {
    return "2px solid " + red.z600;
  } else {
    if (props.isMenuOpen) {
      return "1.5px solid " + green.z500;
    } else {
      return "0.5px solid " + grey.z300;
    }
  }
};

const DropdownWrapper = styled.div`
  position: relative;
  width: ${props => (props.width ? props.width : "max-content")};
`;

export default Dropdown;
