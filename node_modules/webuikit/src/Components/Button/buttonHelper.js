import { button as btnColor } from "../../tokens/colors";
import { button as btnSize } from "../../tokens/sizes";
import spacing from "../../tokens/spacing";
import * as colors from "ZColors";
import misc from "../../tokens/misc";
import { get as _get } from "lodash-es";
import { getRGBAFromHex } from "../../helpers/commonHelper";

const propsBtnColors = {
  ...colors
};

const appearances = {
  default: {
    text: btnColor.default.text,
    icon: btnColor.default.icon,
    background: btnColor.default.background,
    border: btnColor.default.border,
    hoverBackground: btnColor.default.backgroundHover,
    hoverBorder: btnColor.default.borderHover,
    focusBackground: btnColor.default.backgroundFocus,
    focusBorder: btnColor.default.borderFocus,
    activeBackground: btnColor.default.backgroundActive,
    activeBorder: btnColor.default.borderActive,
    loadingInverse: false
  },
  outline: {
    text: btnColor.outline.text,
    icon: btnColor.outline.icon,
    background: btnColor.outline.background,
    border: btnColor.outline.border,
    hoverBackground: btnColor.outline.backgroundHover,
    hoverBorder: btnColor.outline.borderHover,
    hoverText: btnColor.outline.hoverText,
    focusBackground: btnColor.outline.backgroundFocus,
    focusBorder: btnColor.outline.borderFocus,
    activeBackground: btnColor.outline.backgroundActive,
    activeBorder: btnColor.outline.borderActive,
    loadingInverse: false
  },
  link: {
    text: btnColor.link.text,
    icon: btnColor.link.icon,
    background: "transparent",
    border: "transparent",
    hoverText: btnColor.link.hover,
    hoverBackground: "transparent",
    hoverBorder: "transparent",
    focusText: btnColor.link.focus,
    focusBackground: "transparent",
    focusBorder: "transparent",
    loadingInverse: false
  }
};

const buttonSizes = {
  large: {
    lineHeight: btnSize.large.height,
    minWidth: "35rem",
    padding: spacing.medium,
    fontSize: "1.8rem",
    iconSize: 18,
    activeShadow: "0 0.4rem 0.6rem"
  },
  default: {
    lineHeight: btnSize.default.height,
    minWidth: "15rem",
    padding: spacing.small,
    fontSize: "1.6rem",
    iconSize: 14,
    activeShadow: "0 0.4rem 0.6rem"
  },
  compressed: {
    lineHeight: btnSize.compressed.height,
    minWidth: "auto",
    padding: spacing.small,
    fontSize: "1.4rem",
    iconSize: 14,
    activeShadow: "0 0.3rem 0.6rem"
  },
  small: {
    lineHeight: btnSize.small.height,
    minWidth: "auto",
    padding: spacing.small,
    fontSize: "1.4rem",
    iconSize: 14,
    activeShadow: "0 0.3rem 0.6rem"
  }
};

const getBtnSpacing = props => (props.text ? spacing.xsmall : 0);

const getBtnAttributes = props => {
  const isOutline = props.appearance === misc.button.appearances.outline;
  const disabledColor = propsBtnColors[misc.button.disabledColor];
  const activeColor = _get(propsBtnColors, `${props.btnColor}`, disabledColor);
  const propsBtnColor = props.disabled ? disabledColor : activeColor;

  // Get the styles for the button's selected appearance.
  const appearanceStyles = appearances[props.appearance] || appearances.default;

  // Get the styles for the button's selected size.
  const sizeStyles = buttonSizes[props.size] || buttonSizes.default;

  // Merge the two style hashes together to create the base styles.
  const styles = {
    ...appearanceStyles,
    ...sizeStyles
  };
  styles.borderWidth = "0.1rem";
  //define button colors for  button according to outline
  if (isOutline) {
    //outline button with propsBtnColor
    styles.background = propsBtnColors.white;
    styles.text = propsBtnColor.z500;
    styles.hoverText = propsBtnColor.z700; // styles.background;
    styles.border = propsBtnColor.z400;
    styles.hoverBackground = getRGBAFromHex(propsBtnColor.z500, 0.04);
    styles.hoverBorder = propsBtnColor.z600;
    styles.focusBackground = colors.grey.z95;
    styles.focusBorder = propsBtnColor.z600;
    styles.activeBackground = getRGBAFromHex(propsBtnColor.z500, 0.16);
    styles.activeBorder = propsBtnColor.z600;
    styles.customBoxShadow = "unset";
  } else {
    const shadow = "rgba(0,0,0,0.5)";
    //solid button with propsBtnColor
    styles.background = propsBtnColor.z500 || propsBtnColor.z600;
    styles.border = propsBtnColor.z500 || propsBtnColor.z600;
    styles.hoverBackground = propsBtnColor.z600; //hoverColor;
    // styles.hoverBorder = "transparent";
    styles.focusBackground = shadow;
    // styles.focusBorder = shadow;
    styles.activeBackground = propsBtnColor.z600;
    // styles.activeBorder = shadow;
    styles.customBoxShadow = `${styles.activeShadow} rgba(0,0,0,.16)`; //"inset 0 0 0.8rem " + shadow;
    styles.borderWidth = 0;
  }

  // If the loading state is set, override some of the styles.
  if (!props.disabled && props.loading) {
    styles.hoverText = isOutline ? styles.text : styles.hoverText;
    // styles.border = isOutline ? styles.border : styles.hoverBorder;
    // styles.focusBorder = isOutline ? styles.focusBorder : styles.hoverBorder;
    // styles.activeBorder = isOutline ? styles.activeBorder : styles.hoverBorder;
  }

  // If the button contains only an icon and no text, override some of the styles.
  if (props.icon && !props.text) {
    // styles.padding = spacing.xsmall;
    styles.minWidth = "3.6rem";
    // styles.icon = btnColor.link.icon;
  }

  return styles;
};

const getAttr = key => props => getBtnAttributes(props)[key];

export { getBtnAttributes, getBtnSpacing, getAttr };
