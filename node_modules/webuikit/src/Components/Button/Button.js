/* eslint-disable react/prop-types */
// libraries
import React from "react";
import PropTypes from "prop-types";
import { noop as _noop } from "lodash-es";
import styled from "styled-components";
import Icon from "Components/Icon";
import getSVG from "Components/Icon/svgs";
import { svgStyle } from "sauce/helpers/commonHelper";
// helpers
import { getAttr, getBtnSpacing, getBtnAttributes } from "./buttonHelper";
import misc from "../../tokens/misc";
import Spinner from "../Spinner";
import { fontWeights } from "../../tokens/typography";

const GetButtonContent = props => {
  let content = [];

  // Button text
  // eslint-disable-next-line react/prop-types
  if (props.text)
    content.push(<Button.Text key="text">{props.text}</Button.Text>);

  if (!props.disabled && props.loading) {
    content = [
      <Spinner
        inverse={props.appearance !== misc.button.appearances.outline}
        color={
          getBtnAttributes(props).hoverText || getBtnAttributes(props).text
        }
        key="loading"
      />
    ];
  }

  if (props.icon) {
    const iconEle = (
      <Icon.Element>
        <SVG
          xmlns="http://www.w3.org/2000/svg"
          fill={getBtnAttributes(props).text}
          width={getBtnAttributes(props).iconSize}
          height={getBtnAttributes(props).iconSize}
          viewBox="0 0 20 20" // don't change this
          hoverColor={getBtnAttributes(props).hoverText}
        >
          {getSVG(props.icon)}
        </SVG>
      </Icon.Element>
    );
    props.iconAlign == "right"
      ? content.push(iconEle)
      : content.unshift(iconEle);
  }

  return <Button.Element {...props}>{content}</Button.Element>;
};

const Button = ({ children, ...props }) => (
  <GetButtonContent {...props} text={children} />
);

Button.Element = styled.button`
  display: inline-flex;
  vertical-align: middle;
  align-items: center;
  justify-content: center;
  min-width: ${getAttr("minWidth")};
  min-height: ${getAttr("lineHeight")};
  line-height: ${getAttr("lineHeight")};
  /* Safari button margins reset */
  margin-top: 0;
  margin-left: 0;
  white-space: nowrap;
  font-size: ${getAttr("fontSize")};
  font-weight: ${fontWeights.light};
  background: ${getAttr("background")};
  border-color: ${getAttr("border")};
  border-width: ${getAttr("borderWidth")};
  border-style: solid;
  border-radius: ${misc.radius};
  color: ${getAttr("text")};
  padding: 0 ${getAttr("padding")};
  opacity: ${props => (props.disabled ? 0.5 : 1)};
  cursor: ${props => (props.disabled ? "not-allowed" : "pointer")};
  pointer-events: ${props =>
    props.disabled || props.loading || props.success ? "none" : null};
  transition: transform ${misc.animationDuration},
    opacity ${misc.animationDuration};
  > *:not(:last-child):not(:only-child) {
    margin-right: ${getBtnSpacing};
  }
  @media (hover: hover) {
    ${"" /* css for non touch devices, (hover enabled screens to be precised) goes here  */}
    &:hover {
      color: ${getAttr("hoverText") || getAttr("text")};
      background: ${getAttr("hoverBackground")};
      border-color: ${getAttr("hoverBorder")};
    }
  }
  &:active {
    background: ${getAttr("activeBackground")};
    border-color: ${getAttr("activeBorder")};
    outline: 0;
    box-shadow: ${props => getBtnAttributes(props).customBoxShadow};
  }

  @media (hover: none) {
    ${"" /* css for non hover devices, (non-hover screens to be precised) goes here  */}
  }
`;

Button.Text = styled.span`
  display: inline-block;
  vertical-align: middle;
  line-height: normal;
  font-size: inherit;
  margin-top: 0.1rem;
  text-transform: lowercase;
  &::first-letter {
    text-transform: uppercase;
  }
`;

Button.LinkElement = styled(Button.Element.withComponent("a"))`
  text-decoration: none;
`;

Button.propTypes = {
  /** Add a callback on click of button component */
  onClick: PropTypes.func,
  title: PropTypes.string,
  /** Condidtionally disable / Enable a Button */
  disabled: PropTypes.bool,
  /** color of button, should be one of primary colors */
  btnColor: PropTypes.oneOf(["red", "green", "blue", "yellow", "purple"]),
  /** Whether button should appears to be solid or White button with given color boundry and Text */
  appearance: PropTypes.oneOf(["outline", "solid"]),
  /** Switch Loading state on/off */
  loading: PropTypes.bool,
  /** Size of button */
  size: PropTypes.oneOf(["large", "default", "compressed", "small"]),
  /** Icon which goes on button along with Text */
  icon: PropTypes.string,
  /** Position of icon, before or after text */
  iconAlign: PropTypes.oneOf(["left", "right"])
};

Button.defaultProps = {
  onClick: _noop,
  disabled: false,
  loading: false,
  appearance: "solid",
  size: "medium",
  iconAlign: "left",
  btnColor: "green"
};

const SVG = styled.svg`
  ${svgStyle};
  ${Button.Element}:hover & {
    fill: ${props => props.hoverColor};
  }
`;

export default Button;
