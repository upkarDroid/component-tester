// libraries
import React, { useState } from "react";
import PropTypes from "prop-types";
import styled from "styled-components";
import { noop as _noop } from "lodash-es";

// components
import {
  DateRange as DateRangeComponent,
  DateRangePicker
} from "react-date-range";

// styles
import "style-loader!../../../node_modules/react-date-range/dist/styles.css";
import "style-loader!../../../node_modules/react-date-range/dist/theme/default.css";

const getDefaultColor = key => props => props[key];

const ComponentWrapper = styled.div`
  &&& .rdrInRange {
    color: ${getDefaultColor("rangeColor")} !important;
    top: 6px;
    bottom: 6px;
    left: 0;
    right: 0;
  }
  .rdrMonth {
    width: 32rem;
  }
  .rdrDayToday .rdrDayNumber span:after {
    background: ${getDefaultColor("color")} !important;
  }
  .rdrDayNumber span {
    color: #1c1c1c !important;
  }
  .rdrEndEdge,
  .rdrStartEdge {
    right: 5.5px !important;
    left: 5.5px !important;
    border-radius: 50% !important;
    top: 4px;
    bottom: 4px;
    z-index: 1;
  }

  .rdrDay {
    height: 2.428em;
  }

  .rdrCalendarWrapper:not(.rdrDateRangeWrapper)
    .rdrDayHovered
    .rdrDayNumber:after {
    border-radius: 50% !important;
    left: 5px !important;
    right: 5px !important;
  }

  .rdrDayStartPreview {
    left: 5px !important;
    border-top-left-radius: 50% !important;
    border-bottom-left-radius: 50% !important;
  }

  .rdrDayEndPreview {
    right: 5px !important;
    border-top-right-radius: 50% !important;
    border-bottom-right-radius: 50% !important;
  }

  .rdrDay:not(.rdrDayPassive) .rdrStartEdge ~ .rdrDayNumber span,
  .rdrDay:not(.rdrDayPassive) .rdrEndEdge ~ .rdrDayNumber span {
    color: #fff !important;
  }
  .rdrDay:not(.rdrDayPassive) .rdrStartEdge ~ .rdrDayNumber span,
  .rdrDay:not(.rdrDayPassive) .rdrEndEdge ~ .rdrDayNumber span {
    z-index: 2;
  }

  .rdrDay:not(.rdrDayPassive) .rdrStartEdge:not(.rdrEndEdge) ~ .rdrDayNumber {
    background-color: ${getDefaultColor("rangeColor")};
    border-top-left-radius: 50%;
    border-bottom-left-radius: 50%;
    left: 5.5px;
    top: 6px;
    bottom: 6px;
    span {
      padding-right: 5px;
    }
  }

  .rdrDay:not(.rdrDayPassive) .rdrEndEdge:not(.rdrStartEdge) ~ .rdrDayNumber {
    background-color: ${getDefaultColor("rangeColor")};
    border-top-right-radius: 50%;
    border-bottom-right-radius: 50%;
    right: 5.5px;
    top: 6px;
    bottom: 6px;
    span {
      padding-left: 5px;
    }
  }

  .rdrDayPassive .rdrDayNumber span {
    color: #b5b5b5 !important;
  }
`;

const DateRange = props => {
  const selectionRange = {
    startDate: props.startDate,
    endDate: props.endDate,
    key: "selection"
  };

  const [date, setDatePreview] = useState(selectionRange);

  const onChange = newDate => {
    setDatePreview({
      ...date,
      ...newDate.selection
    });

    props.onChange();
  };

  const Component = props.showRangePicker
    ? DateRangePicker
    : DateRangeComponent;

  return (
    <ComponentWrapper color={props.color} rangeColor={props.rangeColor}>
      <Component
        ranges={[date]}
        onChange={onChange}
        months={props.months}
        rangeColors={[props.color]}
        scroll={{
          enabled: false,
          monthHeight: props.monthHeight,
          longMonthHeight: props.longMonthHeight
        }}
        disabledDates={props.disabledDates}
        showDateDisplay={props.showDateDisplay}
      />
    </ComponentWrapper>
  );
};

DateRange.propTypes = {
  startDate: PropTypes.date,
  endDate: PropTypes.date,
  showRangePicker: PropTypes.bool,
  // infiniteScroll: PropTypes.bool,
  months: PropTypes.number,
  color: PropTypes.string,
  rangeColor: PropTypes.string,
  disabledDates: PropTypes.array,
  showDateDisplay: PropTypes.bool,
  onChange: PropTypes.func,
  monthHeight: PropTypes.number,
  longMonthHeight: PropTypes.number
};

DateRange.defaultProps = {
  startDate: new Date(),
  endDate: new Date(),
  showRangePicker: false,
  // infiniteScroll: false,
  months: 1,
  color: "#28A745",
  rangeColor: "#dcffe4",
  disabledDates: [],
  showDateDisplay: true,
  onChange: _noop,
  monthHeight: 300,
  longMonthHeight: 330
};

export default DateRange;
