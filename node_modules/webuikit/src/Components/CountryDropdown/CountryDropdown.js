import React, { useState } from "react";
import PropTypes from "prop-types";
import styled, { css } from "styled-components";
import { black, grey, blue } from "ZColors";
import Icon from "Components/Icon";
import Flag from "Components/Flag";
import OnClickOutside from "../HOC/OnClickOutside";
import misc from "tokens/misc";
import { noop as _noop } from "lodash-es";

const CountryDropdown = props => {
  const { country = "", value = "", countries = [], onSelect = _noop } = props;
  const [countryName, setCountryName] = useState(country);
  const [countryValue, setCountryValue] = useState(value);
  const [visible, setVisible] = useState(false);
  const closeDropdown = () => setVisible(false);
  const toggleDropdown = () => setVisible(!visible);
  const handleSelect = (name, value) => {
    setCountryName(name);
    setCountryValue(value);
    onSelect(value);
  };
  return (
    <OnClickOutside onClickOutside={closeDropdown}>
      <CountryDropdown.Wrapper onClick={toggleDropdown}>
        <CountryDropdown.Menu visible={visible}>
          <CountryDropdown.Arrow visible={visible} />
          <CountryDropdown.CountryContainer>
            {visible &&
              countries.map(country => (
                <Country
                  name={country.name}
                  value={country.value}
                  key={country.value}
                  onSelect={handleSelect}
                  selected={countryValue == country.value}
                />
              ))}
          </CountryDropdown.CountryContainer>
        </CountryDropdown.Menu>
        <CountryDropdown.Head>
          <Flag country={countryValue} width={20} />
          <CountryDropdown.CountryName>
            {countryName}
          </CountryDropdown.CountryName>
          <Icon name="chevron-down" size={15} />
        </CountryDropdown.Head>
      </CountryDropdown.Wrapper>
    </OnClickOutside>
  );
};

const Country = props => {
  const { name = "", value = "", onSelect = _noop, selected = false } = props;
  const handleClick = () => onSelect(name, value);
  return (
    <Country.Wrapper onClick={handleClick} isSelected={selected}>
      <Flag country={value} width={22} />
      <Country.CountryName>{name}</Country.CountryName>
    </Country.Wrapper>
  );
};

Country.CountryName = styled.span`
  font-size: 1.4rem;
  color: ${black};
  line-height: 1.6rem;
  margin: 0 0.5rem 0 0.8rem;
  font-weight: 400;
  margin-top: 0.2rem;
`;

Country.propTypes = {
  name: PropTypes.string,
  value: PropTypes.string,
  onSelect: PropTypes.func,
  selected: PropTypes.bool
};

Country.Wrapper = styled.div`
  margin: 0.4rem;
  padding: 0.2rem 0.5rem;
  display: flex;
  align-items: center;
  cursor: pointer;
  :hover {
    background: ${grey.z100};
  }
  ${props =>
    props.isSelected &&
    css`
      background: ${blue.z100};
    `}
`;

CountryDropdown.propTypes = {
  country: PropTypes.string,
  countries: PropTypes.array,
  onSelect: PropTypes.func,
  value: PropTypes.string
};

CountryDropdown.CountryContainer = styled.section`
  display: grid;
  grid-template-areas: "first second third fourth";
  height: 100%;
  @media (max-width: 480px) {
    grid-template-areas: "first second";
  }
`;

CountryDropdown.Arrow = styled.span`
  display: ${props => (props.visible ? "block" : "none")};
  position: absolute;
  bottom: -1rem;
  left: 3.1rem;
  width: 2.1rem;
  height: 2.3rem;
  transform: rotate(45deg);
  border-radius: 2.2rem 0 0.4rem 0;
  background: #fff;
`;

CountryDropdown.Menu = styled.div`
  position: absolute;
  opacity: ${props => (props.visible ? 1 : 0)};
  bottom: 4rem;
  width: ${props => (props.visible ? "max-content" : 0)};
  height: ${props => (props.visible ? "auto" : 0)};
  background-color: #fff;
  box-shadow: 0.1rem 4rem 4rem rgba(0, 0, 0, 0.15);
  border-radius: ${misc.radius};
  padding: ${props => (props.visible ? "2rem 2.4rem 2.4rem 2.4rem" : 0)};
  cursor: default;
  transform-origin: 0 100%;
  transition-property: transform, opacity, padding;
  will-change: transform, opacity, padding;
  transition-duration: ${misc.animationDuration};
  @media (max-width: 480px) {
    padding: ${props => (props.visible ? "1rem 1.4rem 1.4rem 1.4rem" : 0)};
  }
`;

CountryDropdown.Head = styled.div`
  display: flex;
  align-items: center;
`;

CountryDropdown.CountryName = styled.span`
  font-size: 1.8rem;
  line-height: 2rem;
  color: ${black};
  margin: 0 0.5rem 0 0.8rem;
  font-weight: 400;
  margin-top: 0.2rem;
`;

CountryDropdown.Wrapper = styled.div`
  min-width: 10rem;
  width: max-content;
  cursor: pointer;
  position: relative;
`;

export default CountryDropdown;
