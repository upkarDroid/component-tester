import React, { useState } from "react";
import styled, { css } from "styled-components";
import PropTypes from "prop-types";
import Icon from "Components/Icon";
import { black, grey, blue } from "ZColors";
import misc from "tokens/misc";
import OnClickOutside from "../HOC/OnClickOutside";
import { noop as _noop } from "lodash-es";

const LanguageDropdown = props => {
  const { lang = "", value = ",", onSelect = _noop, languages = [] } = props;
  const [label, setLabel] = useState(lang);
  const [langValue, setlangValue] = useState(value);
  const [visible, setVisible] = useState(false);
  const closeDropdown = () => setVisible(false);
  const toggleDropdown = () => setVisible(!visible);
  const handleSelect = (name, value) => {
    setLabel(name);
    setlangValue(value);
    onSelect(value);
  };
  return (
    <OnClickOutside onClickOutside={closeDropdown}>
      <LanguageDropdown.Wrapper onClick={toggleDropdown}>
        <LanguageDropdown.Menu visible={visible}>
          <LanguageDropdown.Arrow visible={visible} />
          <LanguageDropdown.LanguageContainer>
            {visible &&
              languages.map(language => (
                <Language
                  name={language.name}
                  value={language.value}
                  key={language.value}
                  onSelect={handleSelect}
                  selected={language.value == langValue}
                />
              ))}
          </LanguageDropdown.LanguageContainer>
        </LanguageDropdown.Menu>
        <LanguageDropdown.Head>
          <Icon name="google-fill" size={15} />
          <LanguageDropdown.Label>{label}</LanguageDropdown.Label>
        </LanguageDropdown.Head>
      </LanguageDropdown.Wrapper>
    </OnClickOutside>
  );
};

const Language = props => {
  const { name, value, onSelect, selected = false } = props;
  const handleSelect = () => onSelect(name, value);
  return (
    <Language.Wrapper onClick={handleSelect} isSelected={selected}>
      {name}
    </Language.Wrapper>
  );
};

Language.propTypes = {
  name: PropTypes.string,
  value: PropTypes.string,
  onSelect: PropTypes.func,
  selected: PropTypes.bool
};

Language.Wrapper = styled.div`
  padding: 0.6rem 0.5rem;
  min-width: 10rem;
  :hover {
    background: ${grey.z100};
  }
  cursor: pointer;
  ${props =>
    props.isSelected &&
    css`
      background: ${blue.z100};
    `}
`;

LanguageDropdown.propTypes = {
  lang: PropTypes.string,
  value: PropTypes.string,
  onSelect: PropTypes.func,
  languages: PropTypes.array
};

LanguageDropdown.LanguageContainer = styled.section`
  display: flex;
  flex-direction: column;
`;

LanguageDropdown.Arrow = styled.span`
  display: ${props => (props.visible ? "block" : "none")};
  position: absolute;
  bottom: -1rem;
  left: 3.1rem;
  width: 2.1rem;
  height: 2.3rem;
  transform: rotate(45deg);
  border-radius: 2.2rem 0 0.4rem 0;
  background: #fff;
`;

LanguageDropdown.Menu = styled.div`
  position: absolute;
  opacity: ${props => (props.visible ? 1 : 0)};
  bottom: 4rem;
  width: ${props => (props.visible ? "max-content" : 0)};
  height: ${props => (props.visible ? "auto" : 0)};
  background-color: #fff;
  box-shadow: 0.1rem 4rem 4rem rgba(0, 0, 0, 0.15);
  border-radius: ${misc.radius};
  padding: ${props => (props.visible ? "1rem 1.4rem 1.4rem 1.4rem" : 0)};
  cursor: default;
  transform-origin: 0 100%;
  transition-property: transform, opacity, padding;
  will-change: transform, opacity, padding;
  transition-duration: ${misc.animationDuration};
`;

LanguageDropdown.Head = styled.div`
  display: flex;
  align-items: center;
`;

LanguageDropdown.Label = styled.span`
  font-size: 1.8rem;
  line-height: 2rem;
  color: ${black};
  margin-left: 0.8rem;
  margin-top: 0.2rem;
  font-weight: 400;
`;

LanguageDropdown.Wrapper = styled.div`
  position: relative;
  cursor: pointer;
  min-width: 10rem;
  width: max-content;
`;

export default LanguageDropdown;
