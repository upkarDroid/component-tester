import React, { useState, useEffect, useRef } from "react";
import styled from "styled-components";
import PropTypes from "prop-types";
import Icon from "Components/Icon";
import Spinner from "Components/Spinner";
import { cloneChildren } from "../../helpers/commonHelper";
import { debounce as _debounce } from "lodash-es";
import OnClickOutside from "../HOC/OnClickOutside";
import Textfield from "./Textfield";
import misc from "tokens/misc";

import { grey, black, green } from "ZColors";

const Searchbox = ({
  width,
  placeholder,
  rightIcon,
  children,
  onChange,
  onSelect,
  disabled,
  type = "",
  tagType = "default"
}) => {
  const [searchString, setSearchString] = useState("");
  const [loading, setLoading] = useState(false);
  const [showMenu, setMenuVisibility] = useState(false);
  const [tag, setTag] = useState([]);
  const [childInputRef, setChildInputRef] = useState(null);
  const hasInput = !!searchString.length;
  const isTag = type === "tag";
  const node = useRef();
  const parent = useRef();

  const onInputChange = e => {
    const value = e.target.value.trim() || "";
    setSearchString(e.target.value);
    if (value) {
      setLoading(true);
      setMenuVisibility(true);
      parent.current.debouncedOnChange(value);
    } else {
      setMenuVisibility(false);
    }
  };

  const handleRightIconClick = e => {
    e.stopPropagation();
    node.current.focus();
    setSearchString("");
    setMenuVisibility(false);
    setLoading(false);
  };

  const handleClick = () => {
    if (hasInput) setMenuVisibility(!showMenu);
  };

  const handleOnSelect = value => {
    if (isTag) {
      setSearchString("");
      const newTags = [...tag, value];
      setTag(newTags);
      onSelect(newTags);
    } else {
      setSearchString(value);
      onSelect(value);
    }
  };

  const onRemoveItem = item => {
    const filtered = tag.filter(w => w !== item);
    setTag(filtered);
    onSelect(filtered);
  };

  const suppressClick = e => {
    if (showMenu) e.stopPropagation();
  };

  const handleFocus = () => {
    isTag ? childInputRef.current.focus() : node.current.focus();
  };

  useEffect(() => {
    if (children.length) setLoading(false);
    parent.current.debouncedOnChange = _debounce(onChange, 400);
  }, [children, onChange]);

  const closeMenu = () => setMenuVisibility(false);
  return (
    <OnClickOutside onClickOutside={closeMenu}>
      <Searchbox.Wrapper
        width={width}
        onClick={handleClick}
        ref={parent}
        isTag={isTag}
      >
        <Searchbox.Header
          showMenu={showMenu}
          noPadding={isTag && tag.length}
          onClick={handleFocus}
        >
          <Searchbox.Left isTag={isTag}>
            {!isTag && <Icon name="search" size={18} color={grey.z400} />}
            {isTag ? (
              <Textfield
                placeholder="Type here to search..."
                searchStr={searchString}
                onChange={onInputChange}
                onRemove={onRemoveItem}
                value={searchString}
                tags={tag}
                type={tagType}
                setInputRef={setChildInputRef}
              />
            ) : (
              <Searchbox.Input
                placeholder={placeholder}
                onChange={onInputChange}
                value={searchString}
                ref={node}
                onClick={suppressClick}
                disabled={disabled}
                hasInput={hasInput}
              />
            )}
          </Searchbox.Left>
          {!isTag && (
            <RightIcon>
              <Icon
                onClick={handleRightIconClick}
                name={hasInput ? "cross" : rightIcon}
                size={14}
                color={grey.z400}
                showPointer={hasInput}
              />
            </RightIcon>
          )}
        </Searchbox.Header>
        <Searchbox.Holder>
          <Searchbox.ListWrapper isOpen={showMenu}>
            {showMenu && (
              <>
                <Searchbox.Cover />
                <HR />
                {loading && (
                  <SpinnerHolder>
                    <Spinner color={green.z500} />
                  </SpinnerHolder>
                )}
                {!loading &&
                  cloneChildren(children, {
                    _passClick: handleOnSelect,
                    bold: searchString
                  })}
              </>
            )}
          </Searchbox.ListWrapper>
        </Searchbox.Holder>
      </Searchbox.Wrapper>
    </OnClickOutside>
  );
};

Searchbox.propTypes = {
  width: PropTypes.string,
  placeholder: PropTypes.string,
  rightIcon: PropTypes.string,
  children: PropTypes.node,
  onChange: PropTypes.func.isRequired,
  onSelect: PropTypes.func.isRequired,
  disabled: PropTypes.bool,
  type: PropTypes.string,
  tagType: PropTypes.oneOf(["red", "green", "default"])
};

Searchbox.defaultProps = {
  placeholder: "Start typing to search...",
  rightIcon: "downTriangle",
  disabled: false
};

Searchbox.Holder = styled.section`
  position: relative;
`;

const RightIcon = styled.span`
  margin-left: 3rem;
`;

const SpinnerHolder = styled.div`
  margin: 1.5rem 0 0.5rem 0;
`;
const HR = styled.hr`
  border-left: 0;
  border-top: ${"1px solid " + grey.z200};
  margin: 2px 20px 0 20px;
`;

Searchbox.Cover = styled.div`
  position: absolute;
  top: -6px;
  left: 0;
  width: 100%;
  background: #fff;
  height: 8px;
`;

Searchbox.ListWrapper = styled.section`
  width: 100%;
  position: absolute;
  background: #fff;
  box-shadow: ${props =>
    props.isOpen ? "0px 2px 8px rgba(28, 28, 28, 0.15)" : "none"};
  border-radius: ${"0 0 " + misc.radius + " " + misc.radius};
  border-top: none;
  text-align: center;
  z-index: 10;
  padding-bottom: 1rem;
  opacity: ${props => (props.isOpen ? "1" : "0")};
  transition: all ${misc.animationDuration} ease;
`;
Searchbox.Wrapper = styled.div`
  position: relative;
  cursor: text;
  width: ${props => getWidth(props)};
`;

Searchbox.Header = styled.div`
  position: relative;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: ${props => (props.noPadding ? "0 0.6rem" : "1.55rem 2rem")};
  font-size: 18px;
  border: ${props =>
    props.showMenu ? "0.5px solid transparent" : "0.5px solid " + grey.z300};
  border-radius: ${props =>
    props.showMenu ? misc.radius + " " + misc.radius + " 0 0" : misc.radius};
  box-shadow: ${props =>
    props.showMenu ? "0px 2px 8px rgba(28, 28, 28, 0.15)" : "none"};
  :focus-within {
    box-shadow: 0px 2px 8px rgba(28, 28, 28, 0.15);
  }
`;

Searchbox.Left = styled.div`
  display: ${props => (props.isTag ? "unset" : "flex")};
  align-items: center;
  width: ${props => (props.isTag ? "100%" : "max-content")};
  overflow: ${props => (props.isTag ? "inherit" : "hidden")};
  white-space: ${props => (props.isTag ? "inherit" : "nowrap")};
`;

Searchbox.Input = styled.input`
  margin-left: 0.5rem;
  margin-top: 0.2rem;
  color: ${black};
  overflow: hidden;
  text-overflow: ellipsis;
  outline: none;
  border: none;
  font-family: inherit;
  font-size: 1.8rem;
  &::placeholder {
    color: ${grey.z400};
    font-weight: 300;
  }
`;

const getWidth = props =>
  props.width ? props.width : props.isTag ? "30rem" : "32rem";

export default Searchbox;
