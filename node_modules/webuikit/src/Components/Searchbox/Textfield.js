import React, { useEffect, useRef } from "react";
import styled, { css } from "styled-components";
import { black, grey, white, red, green } from "ZColors";
import PropTypes from "prop-types";
import { noop as _noop } from "lodash-es";
import Icon from "Components/Icon";
import misc from "tokens/misc";

const Textfield = props => {
  const {
    placeholder = "",
    searchStr = "",
    onChange = _noop,
    onRemove = _noop,
    value = "",
    tags = [],
    type = "default",
    setInputRef = _noop
  } = props;
  const node = useRef();
  useEffect(() => {
    if (tags.length) placeCursor();
  });
  useEffect(() => {
    if (node.current) setInputRef(node);
  }, [setInputRef]);
  const placeCursor = () => node.current.focus();
  const getWidth = () => (searchStr.length + 1) * 12 + "px";
  const removeItem = item => () => onRemove(item);
  const showTags = tags =>
    tags.map(t => (
      <TagSpan key={t} background={getBackground(type)} color={getColor(type)}>
        <Span>{t}</Span>
        <Icon
          name="cross"
          showPointer={true}
          color={getColor(type)}
          onClick={removeItem(t)}
        />
      </TagSpan>
    ));
  return (
    <Textfield.Wrapper onClick={placeCursor} hasTag={!!tags.length}>
      {!searchStr && !tags.length && (
        <Textfield.Placeholder onClick={placeCursor}>
          {placeholder}
        </Textfield.Placeholder>
      )}
      {showTags(tags)}
      <Textfield.Input
        tabIndex="0"
        ref={node}
        value={value}
        onChange={onChange}
        hasTag={!!tags.length}
        hasSearchStr={!!searchStr}
        setWidth={getWidth}
      />
    </Textfield.Wrapper>
  );
};

const getColor = type => colors[type || "default"] || black;
const getBackground = type => backgrounds[type || "default"] || grey.z200;
const colors = {
  default: black,
  red: white,
  green: white
};

const backgrounds = {
  default: grey.z200,
  red: red.z500,
  green: green.z500
};

const Span = styled.span`
  margin-right: 1rem;
  margin-top: 0.2rem;
  font-size: 1.8rem;
  font-weight: 300;
`;

const TagSpan = styled.span`
  position: relative;
  display: inline-flex;
  float: left;
  padding: 1.05rem 1rem 1.1rem 1.5rem;
  background: ${props => props.background};
  color: ${props => props.color};
  border-radius: ${misc.radius};
  margin: 0.6rem 0.6rem 0 0;
`;

Textfield.propTypes = {
  searchStr: PropTypes.string,
  placeholder: PropTypes.string,
  onChange: PropTypes.func.isRequired,
  onRemove: PropTypes.func.isRequired,
  value: PropTypes.string,
  tags: PropTypes.array,
  type: PropTypes.oneOf(["default", "red", "green"]),
  setInputRef: PropTypes.func.isRequired
};

Textfield.Wrapper = styled.div`
  position: relative;
  margin-bottom: ${props => (props.hasTag ? "0.5rem" : "0")};
  overflow: auto;
  padding: ${props => (props.hasTag ? "0" : "0.1rem 0")};
`;
Textfield.Placeholder = styled.div`
  position: absolute;
  cursor: text;
  color: ${grey.z400};
  font-weight: 300;
  font-size: 1.8rem;
  margin-top: 0.2rem;
`;
Textfield.Input = styled.input`
  color: ${black};
  width: ${props => (props.hasSearchStr ? props.setWidth : "1rem")};
  overflow: hidden;
  text-overflow: ellipsis;
  outline: none;
  height: ${props => (props.hasTag ? "4.2rem" : "100%")};
  border: none;
  font-family: inherit;
  margin-top: ${props => (props.hasTag ? "0.6rem" : "0")};
  font-size: 18px;
  ${props =>
    props.hasTag &&
    css`
      float: left;
    `}
`;

export default Textfield;
