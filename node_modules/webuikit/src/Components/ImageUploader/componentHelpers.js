// Libraries
import React from "react";
import { isEmpty as _isEmpty } from "lodash-es";
import styled from "styled-components";

// Components
import Button from "../Button";

// helpers
import { getAttributes, getOpacity } from "./imageUploaderHelpers";

// eslint-disable-next-line no-unused-vars
const sendData = ({ onChange, setErrorMsg, uploadObj }) => _ => {
  const isValid = onChange(uploadObj);

  if (!isValid.success && !_isEmpty(isValid.errorMsg)) {
    setErrorMsg(isValid.errorMsg);
  } else {
    setErrorMsg("");
  }
};

const handleDrop = (onChange, setHover, setErrorMsg) => e => {
  e.preventDefault();
  e.stopPropagation();

  const uploadObj = {
    target: e.nativeEvent.dataTransfer
  };

  setHover(false);

  sendData({ onChange, setErrorMsg, uploadObj })();
};

const handleDragEnter = setHover => e => {
  e.preventDefault();
  e.stopPropagation();

  setHover(true);
};

// eslint-disable-next-line no-unused-vars
const handleDragLeave = setHover => e => {
  setHover(false);
};

const handleDragOver = e => {
  e.preventDefault();
};

const eventManager = (func, { onChange, setHover, setErrorMsg }) => {
  func("drop", handleDrop(onChange, setHover, setErrorMsg));
};

const inputRenderer = params => (
  <input
    type="file"
    name="myFile"
    accept="image/*"
    onChange={sendData(params)}
    multiple={params.multiple}
  />
);

const dropTargetRenderer = params => (
  <div
    className="drop-target"
    onDrop={handleDrop(params.onChange, params.setHover, params.setErrorMsg)}
    onDragEnter={handleDragEnter(params.setHover)}
    onDragOver={handleDragOver}
    onDragLeave={handleDragLeave(params.setHover)}
  />
);

const defaultView = params => (
  <Article hover={params.hover}>
    {dropTargetRenderer(params)}
    <img src="https://b.zmtcdn.com/data/ui_kit/c9600442a75428feb602c249e26b62ae1555047660.png" />
    <Section>
      <div className="btn-wrapper">
        <div className="btn-holder">
          <Button appearance="outline">{params.btnLabel}</Button>
          {inputRenderer(params)}
        </div>
      </div>
      {params.btnSubTitle ? (
        <div className="btn-tag">{params.btnSubTitle}</div>
      ) : null}
    </Section>
  </Article>
);

const errorView = params => (
  <Article hover={params.hover} error>
    {dropTargetRenderer(params)}
    <img src="https://b.zmtcdn.com/data/ui_kit/b94989041447cf1d5137f81c687829ca1555047691.png" />
    <Section error>
      <div className="btn-tag">{params.errorMsg}</div>
      <div className="btn-wrapper">
        <div className="btn-holder">
          <Button appearance="outline" btnColor="red">
            {params.btnLabel}
          </Button>
          {inputRenderer(params)}
        </div>
      </div>
    </Section>
  </Article>
);

const Section = styled.section`
  .btn-wrapper,
  .btn-tag {
    display: flex;
    justify-content: center;
    padding-bottom: 23px;
  }

  input {
    cursor: pointer;
  }

  .btn-tag {
    color: ${getAttributes("tagColor")};
    font-size: ${getAttributes("tagFontSize")}px;
    line-height: ${getAttributes("tagLineHeight")}px;
  }

  .btn-holder {
    position: relative;
    overflow: hidden;
    display: inline-block;
  }

  .btn-holder input[type="file"] {
    font-size: 40px;
    position: absolute;
    left: 0;
    top: 0;
    opacity: 0;
  }
`;

const Article = styled.article`
  border: 1.5px dotted ${getAttributes("borderColor")};
  background: ${getAttributes("background")};
  border-radius: 2px;
  position: relative;
  opacity: ${getOpacity};

  button {
    background: transparent;
  }

  img {
    height: ${getAttributes("imgHeight")}px;
    display: flex;
    margin: 34px auto;
  }

  .drop-target {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
  }
`;

export { defaultView, errorView, eventManager };
