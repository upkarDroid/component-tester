// libraries
import React, { useState } from "react";
import PropTypes from "prop-types";
import styled from "styled-components";
import { noop as _noop } from "lodash-es";

// components
import Icon from "../../Icon";
import getSVG from "Components/Icon/svgs";

import { svgStyle, camelize } from "sauce/helpers/commonHelper";

// helpers
import { getAttributes, getLabelAttr, getState } from "../inputHelper";
import misc from "../../../tokens/misc";

const Input = props => {
  const [focused, toggleFocus] = useState(false);
  const [value, valueChange] = useState(props.value);
  // eslint-disable-next-line no-unused-vars
  const onFocusToggle = _ => {
    toggleFocus(!focused);
  };

  const onChange = e => valueChange(e.target.value);
  const state = getState(props, focused);

  return (
    <Input.Wrapper
      onFocus={onFocusToggle}
      onBlur={onFocusToggle}
      onChange={onChange}
    >
      <Input.ElementWrapper width={props.width}>
        <Input.Element
          {...props}
          value={value}
          state={state}
          autoComplete={props.autocomplete ? "on" : "nope"}
        />
        {props.icon && (
          <Icon.Element>
            <SVG
              xmlns="http://www.w3.org/2000/svg"
              fill={props.iconColor}
              width={17}
              height={17}
              viewBox="0 0 20 20" // don't change this
            >
              {getSVG(camelize(props.icon))}
            </SVG>
          </Icon.Element>
        )}
      </Input.ElementWrapper>
      {props.disabled ? (
        <Input.LabelDisabled showLbl state={state}>
          {props.label}
        </Input.LabelDisabled>
      ) : (
        <Input.Label showLbl={focused || !!value} state={state}>
          {props.label}
        </Input.Label>
      )}
      {props.helperText && (
        <Input.Helper state={state}>{props.helperText}</Input.Helper>
      )}
    </Input.Wrapper>
  );
};

Input.ElementWrapper = styled.div`
  position: relative;
  margin: 0;
  width: ${getAttributes("width")};
`;

Input.Helper = styled.div`
  height: 13px;
  color: ${getAttributes("helperColor")};
  font-size: 11px;
  line-height: 13px;
  margin-top: 8px;
`;

Input.Wrapper = styled.div`
  position: relative;
`;

Input.Label = styled.span`
  position: absolute;
  pointer-events: none;
  transition: 0.2s ease all;
  color: ${getAttributes("placeholder")};
  top: ${getLabelAttr("top")};
  left: ${getLabelAttr("left")};
  font-size: ${getLabelAttr("fontSize")};
  background: ${getLabelAttr("background")};
  padding: ${getLabelAttr("padding")};
`;

Input.LabelDisabled = styled.span`
  position: absolute;
  pointer-events: none;
  color: ${getAttributes("placeholder")};
  top: ${getLabelAttr("top")};
  left: ${getLabelAttr("left")};
  font-size: ${getLabelAttr("fontSize")};
  background: ${getLabelAttr("labelBackground")};
  padding: ${getLabelAttr("padding")};
`;

Input.Element = styled.input`
  padding: ${getAttributes("padding")};
  background: ${getAttributes("background")};
  border: ${getAttributes("borderWidth")} ${getAttributes("borderColor")};
  font-size: ${getAttributes("fontSize")};
  width: ${getAttributes("width")};
  outline: none;
  &::-webkit-input-placeholder {
    color: #a9a9a9;
  }
  box-sizing: border-box;
  border-radius: ${misc.radius};
  color: ${getAttributes("text")};
`;

Input.propTypes = {
  label: PropTypes.string.isRequired,
  value: PropTypes.string,
  type: PropTypes.string,
  width: PropTypes.string,
  onChange: PropTypes.func,
  onBlur: PropTypes.func,
  disabled: PropTypes.bool,
  helperText: PropTypes.string,
  icon: PropTypes.string,
  iconColor: PropTypes.string,
  autocomplete: PropTypes.bool
};

Input.defaultProps = {
  color: "white",
  disabled: false,
  value: "",
  type: "text",
  onChange: _noop,
  onBlur: _noop,
  helperText: "",
  iconColor: "#B5B5B5",
  autocomplete: true
};

const SVG = styled.svg`
  ${svgStyle};
  position: absolute;
  top: 15px;
  right: 10px;
`;

export default Input;
