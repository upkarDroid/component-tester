// libraries
import React, { useState, useEffect } from "react";
import PropTypes from "prop-types";
import { noop as _noop } from "lodash-es";
import styled from "styled-components";

// helpers
import {
  getAttributes,
  getClickedAttributes,
  getType
} from "./checkboxHelpers";

const Checkbox = props => {
  const checkboxType = getType(props.disabled, props.solid);
  const [isChecked, toggleVal] = useState(
    props.defaultChecked || props.checked
  );

  // eslint-disable-next-line no-unused-vars
  const onToggle = _ => {
    toggleVal(!isChecked);
  };

  useEffect(() => {
    props.onChange(isChecked);
  });

  return (
    <Checkbox.Label>
      <Checkbox.Element
        {...props}
        cbType={checkboxType}
        type="checkbox"
        onClick={onToggle}
        checked={isChecked}
      />
      {props.label}
    </Checkbox.Label>
  );
};

Checkbox.Label = styled.label`
  font-size: 14px;
  line-height: 1.2;
  color: #1c1c1c;
  height: 18px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: start;
  height: 100%;
  width: max-content;
`;

Checkbox.Element = styled.input`
  appearance: none;
  cursor: pointer;
  outline: 0;
  border-radius: 4px;
  margin-right: 8px;
  width: 18px;
  height: 18px;
  background: #fff;
  border: 2px solid ${getAttributes("borderColor")};
  box-sizing: border-box;
  position: relative;
  &:hover {
    border: 2px solid ${getAttributes("hoverBorderColor")};
  }
  transition: all 0.4s;

  &:checked::after {
    position: absolute;
    top: 0.03rem;
    left: 0.4rem;
    width: 0.55rem;
    height: 1rem;
    content: "";
    border-color: ${getClickedAttributes("tickColor")};
    border-style: solid;
    border-top: 0;
    border-right-width: 2px;
    border-bottom-width: 2px;
    border-left: 0;
    transform: rotate(48deg);
  }

  &:checked {
    border: 2px solid ${getClickedAttributes("borderColor")};
    background: ${getClickedAttributes("background")};
  }
`;

Checkbox.propTypes = {
  label: PropTypes.string.isRequired,
  onChange: PropTypes.func,
  checked: PropTypes.bool,
  disabled: PropTypes.bool,
  solid: PropTypes.bool,
  defaultChecked: PropTypes.bool
};

Checkbox.defaultProps = {
  disabled: false,
  onChange: _noop,
  checked: false,
  solid: true
};

export default Checkbox;
