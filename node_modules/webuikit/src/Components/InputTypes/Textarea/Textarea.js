/* eslint-disable no-unused-vars */
// libraries
import React, { useState } from "react";
import PropTypes from "prop-types";
import styled from "styled-components";
import { noop as _noop } from "lodash-es";

// helpers
import { getAttributes, getLabelAttr, getState } from "../inputHelper";
import misc from "../../../tokens/misc";

const Textarea = props => {
  const [focused, toggleFocus] = useState(false);
  const [value, valueChange] = useState(props.value);
  const onFocusToggle = _ => {
    toggleFocus(!focused);
  };

  const onChange = e => valueChange(e.target.value);
  const state = getState(props, focused);

  return (
    <Textarea.Wrapper
      onFocus={onFocusToggle}
      onBlur={onFocusToggle}
      onChange={onChange}
    >
      <Textarea.Element {...props} value={value} state={state} />
      {props.disabled ? (
        <Textarea.LabelDisabled showLbl state={state}>
          {props.label}
        </Textarea.LabelDisabled>
      ) : (
        <Textarea.Label showLbl={focused || !!value} state={state}>
          {props.label}
        </Textarea.Label>
      )}
      <Textarea.Helper state={state}>{props.helperText}</Textarea.Helper>
    </Textarea.Wrapper>
  );
};

const getResize = props => props.resize;

Textarea.Helper = styled.div`
  height: 13px;
  color: ${getAttributes("helperColor")};
  font-size: 11px;
  line-height: 13px;
  margin-top: 5px;
`;

Textarea.Wrapper = styled.div`
  position: relative;
`;

Textarea.Label = styled.span`
  position: absolute;
  pointer-events: none;
  transition: 0.2s ease all;
  color: ${getAttributes("placeholder")};
  top: ${getLabelAttr("top")};
  left: ${getLabelAttr("left")};
  font-size: ${getLabelAttr("fontSize")};
  background: ${getLabelAttr("background")};
  padding: ${getLabelAttr("padding")};
`;

Textarea.LabelDisabled = styled.span`
  position: absolute;
  pointer-events: none;
  color: ${getAttributes("placeholder")};
  top: ${getLabelAttr("top")};
  left: ${getLabelAttr("left")};
  font-size: ${getLabelAttr("fontSize")};
  background: ${getLabelAttr("labelBackground")};
  padding: ${getLabelAttr("padding")};
`;

Textarea.Element = styled.textarea`
  padding: ${getAttributes("padding")};
  background: ${getAttributes("background")};
  border: ${getAttributes("borderWidth")} ${getAttributes("borderColor")};
  font-size: ${getAttributes("fontSize")};
  width: ${getAttributes("width")};
  outline: none;
  &::-webkit-input-placeholder {
    color: #a9a9a9;
  }
  box-sizing: border-box;
  border-radius: ${misc.radius};
  resize: ${getResize};
  color: ${getAttributes("text")};
`;

Textarea.propTypes = {
  label: PropTypes.string,
  value: PropTypes.string,
  width: PropTypes.string,
  onChange: PropTypes.func,
  onBlur: PropTypes.func,
  disabled: PropTypes.bool,
  rows: PropTypes.number,
  cols: PropTypes.number,
  resize: PropTypes.string,
  helperText: PropTypes.string
};

Textarea.defaultProps = {
  color: "white",
  disabled: false,
  value: "",
  onChange: _noop,
  onBlur: _noop,
  helperText: ""
};

export default Textarea;
