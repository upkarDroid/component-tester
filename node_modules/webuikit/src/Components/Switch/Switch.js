import React, { useState } from "react";
import styled, { css } from "styled-components";
import misc from "../../tokens/misc";
import { noop as _noop } from "lodash-es";
import PropTypes from "prop-types";
import { red } from "ZColors";
import RadioSwitch from "./RadioSwitch";

let size = 22;
let spacing = 2;
const totalWidth = 38;
const slideLength = totalWidth - (size + 2 * spacing + 1);

const Switch = props => {
  const { readOnly, onToggle, type, active } = props;
  const [activeState, toggleActiveState] = useState(active);

  if (type === "checkCircle") {
    return <RadioSwitch onToggle={onToggle} active={activeState} {...props} />;
  } else {
    return (
      <Switch.Ele
        onClick={() => {
          if (!readOnly) {
            onToggle(!activeState);
            toggleActiveState(!activeState);
          }
        }}
      >
        <Toggle type="checkbox" />
        <Switch.slider {...props} active={activeState} />
      </Switch.Ele>
      // <h1>Working</h1>
    );
  }
};

Switch.Ele = styled.span`
  position: relative;
  display: inline-block;
  width: ${totalWidth / 10}rem;
  height: ${(size + 2 * spacing) / 10}rem;
  appearance: none;
  outline: none;
  &:focus {
    outline: 0;
  }
`;

const Toggle = styled.input`
  opacity: 0;
  width: 0;
  height: 0;
`;

Switch.slider = styled.span`
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  appearance: none;
  bottom: 0;
  display: inline-flex;
  vertical-align: middle;
  align-items: center;
  justify-content: center;
  margin-top: 0;
  margin-left: 0;
  background-color: ${props => (props.active === true ? red.z_red : "#ccc")};
  -webkit-transition: background-color ${misc.animationDuration},
    opacity ${misc.animationDuration};
  transition: background-color ${misc.animationDuration} ease,
    opacity ${misc.animationDuration};
  border-radius: ${(size + 2 * spacing) / 10}rem;
  outline: none;
  :before {
    position: absolute;
    content: "";
    height: ${size / 10}rem;
    width: ${size / 10}rem;
    left: ${spacing / 10}rem;
    background-color: white;
    margin-top: 0;
    margin-left: 0;
    outline: none;
    border-radius: 50%;
    transition: transform ${misc.animationDuration} ease,
      width ${misc.animationDuration}, left ${misc.animationDuration},
      opacity ${misc.animationDuration};
    transform: translateX(
      ${props => (props.active === true ? slideLength / 10 + "rem" : 0)}rem
    );

    border: 0.5px solid rgba(0, 0, 0, 0.04);
    box-shadow: 0 ${props => (props.active === true ? 0.2 : 0.1)}rem 0.4rem
      rgba(28, 28, 28, 0.1);
    &:active {
      outline: none;
    }
  }
  ${props =>
    props.readOnly
      ? css`
          opacity: 0.4;
        `
      : css`
          &:active {
            outline: none;
            &:before {
              width: ${(size + 4) / 10}rem;
              left: ${props => (props.active ? "-0.2rem" : "0.4rem")};
            }
          }
        `}
`;

Switch.propTypes = {
  readOnly: PropTypes.bool,
  size: PropTypes.number,
  spacing: PropTypes.number,
  /** This gets invoked everytime switch state is changed. Final state is passed as argument */
  onToggle: PropTypes.func,
  active: PropTypes.bool,
  type: PropTypes.oneOf(["default", "checkCircle"])
};

Switch.defaultProps = {
  readOnly: false,
  size: 22,
  spacing: 2,
  onToggle: _noop,
  active: false,
  type: "default"
};

export default Switch;
